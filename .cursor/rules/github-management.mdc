---
description:
globs:
alwaysApply: false
---
# GitHub 관리 룰 (GitHub Management Rules)

## 브랜치 전략 (Branch Strategy)

### 브랜치 명명 규칙
- `main`: 프로덕션 브랜치
- `develop`: 개발 브랜치
- `feature/{task-name}`: 기능 개발 브랜치
- `bugfix/{bug-name}`: 버그 수정 브랜치
- `hotfix/{critical-fix}`: 긴급 수정 브랜치

### 브랜치 플로우
1. `main`에서 `develop` 브랜치 생성
2. `develop`에서 `feature/` 브랜치 생성하여 개발
3. 개발 완료 후 `develop`으로 PR 생성
4. 코드 리뷰 및 테스트 통과 후 머지
5. 릴리즈 시 `develop`에서 `main`으로 PR 생성

## Pull Request (PR) 관리

### PR 생성 규칙
- **제목**: `[타입] 간단한 설명`
  - 예: `[FEAT] 채팅 기능 추가`, `[FIX] 로그인 버그 수정`
- **타입 분류**:
  - `FEAT`: 새로운 기능 추가
  - `FIX`: 버그 수정
  - `REFACTOR`: 코드 리팩토링
  - `STYLE`: 코드 스타일 변경
  - `DOCS`: 문서 수정
  - `TEST`: 테스트 코드 추가/수정
  - `CHORE`: 빌드 업무 수정, 패키지 매니저 수정

### PR 설명 필수 항목
1. **변경 사항 요약**
2. **테스트 방법**
3. **스크린샷** (UI 변경 시)
4. **체크리스트**
   - [ ] 테스트 코드 작성 완료
   - [ ] 문서 업데이트 완료
   - [ ] 코드 리뷰 준비 완료

### PR 리뷰 규칙
- **최소 1명의 승인** 필요
- **모든 테스트 통과** 필수
- **컨플릭트 해결** 후 머지
- **리뷰어는 24시간 내 응답** 권장

### 자동화 규칙
- PR 생성 시 자동 라벨링
- 담당자 자동 할당
- 테스트 자동 실행
- 코드 리뷰 자동 요청

## Issue 관리

### Issue 생성 규칙
- **제목**: `[타입] 명확한 문제/요청 설명`
- **타입 분류**:
  - `BUG`: 버그 신고
  - `FEATURE`: 새로운 기능 요청
  - `TASK`: 개발 작업
  - `QUESTION`: 질문
  - `ENHANCEMENT`: 기능 개선

### Issue 라벨 시스템
- **우선순위**: `priority:high`, `priority:medium`, `priority:low`
- **상태**: `status:todo`, `status:in-progress`, `status:review`, `status:done`
- **타입**: `type:bug`, `type:feature`, `type:task`, `type:docs`
- **영역**: `area:backend`, `area:frontend`, `area:docs`, `area:ci`

### Issue 할당 규칙
- **담당자 자동 할당** (라운드 로빈 방식)
- **라벨 기반 할당** (전문 영역별)
- **우선순위 기반 할당**

## 코드 리뷰 가이드라인

### 리뷰어 체크리스트
- [ ] 코드 품질 (가독성, 유지보수성)
- [ ] 성능 최적화
- [ ] 보안 이슈
- [ ] 테스트 커버리지
- [ ] 문서화 완성도
- [ ] 아키텍처 일관성

### 리뷰 댓글 규칙
- **건설적인 피드백** 제공
- **구체적인 개선 방안** 제시
- **칭찬과 격려** 포함
- **명확한 액션 아이템** 제시

## 자동화 워크플로우

### 테스트 자동화
- **모든 push와 PR에서 테스트 실행**
- **테스트 실패 시 머지 차단**
- **커버리지 리포트 자동 생성**

### 알림 자동화
- **PR 생성/업데이트 시 팀 알림**
- **이슈 할당 시 담당자 알림**
- **리뷰 요청 시 리뷰어 알림**

### 라벨링 자동화
- **파일 변경 패턴 기반 라벨링**
- **키워드 기반 라벨링**
- **우선순위 자동 설정**

## 릴리즈 관리

### 버전 관리
- **Semantic Versioning** 사용 (MAJOR.MINOR.PATCH)
- **릴리즈 노트** 자동 생성
- **태그 자동 생성**

### 배포 프로세스
1. `develop` → `main` PR 생성
2. 모든 테스트 통과 확인
3. 코드 리뷰 완료
4. 머지 후 자동 배포
5. 릴리즈 노트 생성

## 보안 및 품질 관리

### 보안 체크
- **민감 정보 검사**
- **의존성 취약점 검사**
- **코드 정적 분석**

### 품질 관리
- **코드 스타일 검사**
- **복잡도 분석**
- **중복 코드 검사**
- **테스트 커버리지 유지**
