name: 🔍 PR 코드 리뷰 자동 등록

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  auto-code-review:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 코드 변경 분석
      id: analysis
      run: |
        # 변경된 Python 파일들 분석
        PYTHON_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "\.py$")
        
        # 복잡한 변경사항 검사
        LARGE_FILES=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | awk '$1+$2 > 100 {print $3}')
        
        # 중요 파일 변경 검사
        CRITICAL_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "(main\.py|config\.py|agent\.py|__init__\.py)")
        
        # 테스트 파일 변경 검사
        TEST_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "test_.*\.py$")
        
        echo "python_files<<EOF" >> $GITHUB_OUTPUT
        echo "$PYTHON_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "large_files<<EOF" >> $GITHUB_OUTPUT
        echo "$LARGE_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "critical_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CRITICAL_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "test_files<<EOF" >> $GITHUB_OUTPUT
        echo "$TEST_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔧 코드 분석 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install flake8 bandit safety pylint complexity

    - name: 📏 코드 품질 검사
      id: quality-check
      run: |
        # Flake8 검사
        echo "=== Flake8 검사 ===" > quality_report.txt
        flake8 --max-line-length=88 --extend-ignore=E203,W503 --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' backend/ frontend/ >> quality_report.txt 2>&1 || true
        
        # 보안 검사 (Bandit)
        echo -e "\n=== 보안 검사 (Bandit) ===" >> quality_report.txt
        bandit -r backend/ frontend/ -f txt >> quality_report.txt 2>&1 || true
        
        # 복잡도 검사
        echo -e "\n=== 복잡도 검사 ===" >> quality_report.txt
        find backend/ frontend/ -name "*.py" -exec python -m mccabe --min 10 {} \; >> quality_report.txt 2>&1 || true
        
        # 의존성 보안 검사
        echo -e "\n=== 의존성 보안 검사 ===" >> quality_report.txt
        safety check --json >> quality_report.txt 2>&1 || true

    - name: 🤖 AI 코드 리뷰 댓글 생성
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // 품질 보고서 읽기
          let qualityReport = '';
          try {
            qualityReport = fs.readFileSync('quality_report.txt', 'utf8');
          } catch (error) {
            qualityReport = '품질 보고서를 생성할 수 없습니다.';
          }
          
          const pythonFiles = `${{ steps.analysis.outputs.python_files }}`.split('\n').filter(f => f.trim());
          const largeFiles = `${{ steps.analysis.outputs.large_files }}`.split('\n').filter(f => f.trim());
          const criticalFiles = `${{ steps.analysis.outputs.critical_files }}`.split('\n').filter(f => f.trim());
          const testFiles = `${{ steps.analysis.outputs.test_files }}`.split('\n').filter(f => f.trim());
          
          // 자동 리뷰 생성
          let reviewComments = [];
          
          // 1. 일반적인 코드 품질 체크
          if (pythonFiles.length > 0) {
            reviewComments.push(`
            ## 🐍 Python 코드 분석
            
            변경된 Python 파일: ${pythonFiles.length}개
            ${pythonFiles.map(f => `- \`${f}\``).join('\n')}
            
            ### 📋 체크리스트
            - [ ] 함수/클래스에 적절한 docstring이 있나요?
            - [ ] 변수명이 명확하고 이해하기 쉬운가요?
            - [ ] 하드코딩된 값들이 상수로 분리되어 있나요?
            - [ ] 에러 처리가 적절히 구현되어 있나요?
            `);
          }
          
          // 2. 대용량 파일 경고
          if (largeFiles.length > 0) {
            reviewComments.push(`
            ## ⚠️ 대용량 변경 파일 감지
            
            다음 파일들이 100줄 이상 변경되었습니다:
            ${largeFiles.map(f => `- \`${f}\``).join('\n')}
            
            ### 권장사항
            - 가능하면 더 작은 단위로 분할을 고려해보세요
            - 변경 사항에 대한 상세한 설명을 추가해주세요
            - 단위 테스트를 충분히 작성해주세요
            `);
          }
          
          // 3. 중요 파일 변경 알림
          if (criticalFiles.length > 0) {
            reviewComments.push(`
            ## 🚨 중요 파일 변경 감지
            
            다음 핵심 파일들이 변경되었습니다:
            ${criticalFiles.map(f => `- \`${f}\``).join('\n')}
            
            ### 주의사항
            - 이 변경사항이 전체 시스템에 미치는 영향을 검토해주세요
            - 충분한 테스트를 진행해주세요
            - 배포 전 스테이징 환경에서 검증해주세요
            `);
          }
          
          // 4. 테스트 관련 체크
          if (testFiles.length > 0) {
            reviewComments.push(`
            ## 🧪 테스트 코드 분석
            
            변경된 테스트 파일: ${testFiles.length}개
            ${testFiles.map(f => `- \`${f}\``).join('\n')}
            
            ### 테스트 체크리스트
            - [ ] 새로운 기능에 대한 테스트가 추가되었나요?
            - [ ] Edge case에 대한 테스트가 포함되어 있나요?
            - [ ] 테스트 커버리지가 충분한가요?
            - [ ] 테스트가 독립적으로 실행 가능한가요?
            `);
          } else if (pythonFiles.length > 0) {
            reviewComments.push(`
            ## ❌ 테스트 코드 누락
            
            Python 코드가 변경되었지만 테스트 파일 변경이 없습니다.
            
            ### 권장사항
            - 새로운 기능이나 수정사항에 대한 테스트를 추가해주세요
            - 기존 테스트가 여전히 유효한지 확인해주세요
            `);
          }
          
          // 5. 품질 보고서 요약
          if (qualityReport && qualityReport.trim()) {
            const reportSummary = qualityReport.substring(0, 1000) + (qualityReport.length > 1000 ? '...' : '');
            reviewComments.push(`
            ## 📊 자동 품질 검사 결과
            
            <details>
            <summary>상세 보고서 보기</summary>
            
            \`\`\`
            ${reportSummary}
            \`\`\`
            
            </details>
            
            ### 주요 이슈
            - 코드 스타일 가이드 준수 여부를 확인해주세요
            - 보안 취약점이 없는지 검토해주세요
            - 복잡한 함수는 리팩토링을 고려해주세요
            `);
          }
          
          // 6. 일반적인 리뷰 가이드
          reviewComments.push(`
          ## 🔍 일반 리뷰 가이드
          
          ### 코드 품질
          - **가독성**: 코드가 이해하기 쉬운가요?
          - **성능**: 불필요한 반복이나 비효율적인 로직은 없나요?
          - **보안**: 입력 검증이나 권한 체크가 적절한가요?
          - **에러 처리**: 예외 상황에 대한 처리가 있나요?
          
          ### 아키텍처
          - **SOLID 원칙**: 단일 책임, 개방-폐쇄 원칙 등을 준수하나요?
          - **의존성**: 순환 의존성이나 강한 결합은 없나요?
          - **확장성**: 향후 기능 추가 시 유연하게 대응 가능한가요?
          
          리뷰 완료 후 승인 또는 변경 요청을 해주세요! 🙏
          `);
          
          // 최종 리뷰 댓글 생성
          const finalComment = `
          # 🤖 자동 코드 리뷰
          
          안녕하세요! 자동 코드 리뷰 시스템입니다.
          
          ${reviewComments.join('\n---\n')}
          
          ---
          
          *이 리뷰는 자동으로 생성되었습니다. 추가적인 수동 리뷰도 진행해주세요.*
          `;
          
          // 댓글 생성
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: finalComment
          });

    - name: 📝 리뷰 요청 알림
      uses: actions/github-script@v6
      with:
        script: |
          // PR 작성자에게 리뷰 준비 완료 알림
          const comment = `
          ## 🎯 리뷰 준비 완료!
          
          @${{ github.event.pull_request.user.login }}님, 자동 코드 리뷰가 완료되었습니다.
          
          ### 다음 단계
          1. 위의 자동 리뷰 댓글을 확인해주세요
          2. 지적된 사항들을 검토하고 필요시 수정해주세요
          3. 리뷰어들의 추가 피드백을 기다려주세요
          
          ### 💡 팁
          - 리뷰 댓글에 대한 응답이나 질문이 있으면 언제든 댓글로 남겨주세요
          - 변경사항이 있을 때마다 자동 리뷰가 업데이트됩니다
          
          화이팅! 🚀
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 