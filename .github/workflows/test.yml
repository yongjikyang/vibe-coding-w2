name: 🧪 테스트 자동 실행

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4

    - name: 🐍 Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 의존성 설치
      run: |
        python -m pip install --upgrade pip
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
        if [ -f frontend/requirements.txt ]; then pip install -r frontend/requirements.txt; fi
        pip install pytest pytest-cov pytest-asyncio

    - name: 🧪 백엔드 테스트 실행
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: 📊 커버리지 업로드
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: 💬 테스트 결과 댓글
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('backend/coverage.xml')) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ 테스트가 성공적으로 완료되었습니다! 🎉'
            });
          }

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4

    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔧 린트 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy

    - name: 🎨 코드 포맷팅 검사 (Black)
      run: |
        black --check backend/ frontend/

    - name: 📏 코드 스타일 검사 (Flake8)
      run: |
        flake8 backend/ frontend/ --max-line-length=88 --extend-ignore=E203,W503

    - name: 📚 Import 정렬 검사 (isort)
      run: |
        isort --check-only backend/ frontend/

    - name: 🔍 타입 검사 (MyPy)
      run: |
        mypy backend/app/ --ignore-missing-imports 